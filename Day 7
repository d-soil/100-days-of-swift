// Day 7
##Closures With Parameters:
func travel(action: (String) -> Void) {
    print("I'm getting ready to go")
    action("London")
    print("I arrived!")
}

can be called with:
travel{ (place: String) in
    print("I'm going to \(place) in my car"
    )
}

##Closures With Return Values:
func travel(action: (String) -> String) {
    print("I'm getting ready to go.")
    let description = action("London")
    print(description)
    print("I have arrived!")
}

So when we call it with trailing closure syntax, our closure 
code is required to accept a string and return a string:
travel { (place: String) -> String in
    return "I'm going to \(place) in my car"
}

##Shorthand Parameter Names:
Since Swift knows the parameter to the closure must be a string AND the return must
be a string, so we can remove both for the shorthand:
travel { place in
    return "I'm going to \(place) in my car"
} 

Which can then shorten to 
travel { place in
    "I'm going to \(place) in my car"
} 
This works because the closure only has one line of code- so it must be the return value.
It can be shortened even further to:
travel {
    "I'm going to \($0) in my car"
}

##Closures With Multiple Parameters:
func travel(action: (String, Int) -> String) {
    print("I'm getting ready to go.")
    let description = action("London", 60)
    print(description)
    print("I arrived!")
}
Can be called with:
travel {
    "I'm going to \($0) at \($1) miles per hour."
} 
Some people don't like to use shorthand parameter names as they can be confusing!

##Returning Closures:
In the same way you can pass a closure to a function, closures can be returned 
from a function. It uses a double -> to specify your return then the closure's return

func travel() -> (String) -> (Void) {
    return {
        print("I'm going to \($0)")
    }
}

let result = travel()
result("London")

You can technically also do this like this: 
let result2 = travel()("London")
But it is dispreferred.

##Capturing Values:
External values used inside closures are 'captured'
Closure capturing will happen if we create values in travel() that get used inside the closure
func travel() -> (String) -> Void {
    var counter = 1

    return {
        print("\(counter). I'm going to \($0)")
        counter += 1
    }
}
So if we called result("London") multiple times the counter would increment